Max rectangle
Solution:

class Solution:
    def maxArea(self, mat):
        if not mat or not mat[0]:
            return 0
        
        n, m = len(mat), len(mat[0])
        heights = [0] * m
        max_area = 0
        
        for i in range(n):
            # Build histogram heights row by row
            for j in range(m):
                if mat[i][j] == 0:
                    heights[j] = 0
                else:
                    heights[j] += 1
                    
            # Compute largest rectangle in this histogram
            max_area = max(max_area, self.largestRectangleArea(heights))
        
        return max_area
    
    def largestRectangleArea(self, heights):
        stack = []   # store indices
        max_area = 0
        heights.append(0)  # sentinel value to clear stack at the end
        
        for i, h in enumerate(heights):
            while stack and heights[stack[-1]] > h:
                height = heights[stack.pop()]
                width = i if not stack else i - stack[-1] - 1
                max_area = max(max_area, height * width)
            stack.append(i)
        
        heights.pop()  # remove sentinel
        return max_area
